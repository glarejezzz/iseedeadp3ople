#include "economic_agents.h"
#include <iostream>

// EconomicAgent implementation
EconomicAgent::EconomicAgent(double initialBudget, const std::string& agentName) 
    : budget(initialBudget), name(agentName) {}

void EconomicAgent::updateBudget(double delta) {
    budget += delta;
}

double EconomicAgent::getBudget() const {
    return budget;
}

const std::string& EconomicAgent::getName() const {
    return name;
}

// Consumer implementation
Consumer::Consumer(double initialBudget, const std::string& name) 
    : EconomicAgent(initialBudget, name) {}

void Consumer::makeDecision() {
    if (budget > 5) {
        updateBudget(-5); // Потребитель тратит 5 единиц
    }
}

std::string Consumer::getType() const {
    return "Consumer";
}

// Company implementation
Company::Company(double initialBudget, double cost, const std::string& name) 
    : EconomicAgent(initialBudget, name), productionCost(cost) {}

void Company::makeDecision() {
    // Простая реализация без rand() (так как cstdlib нельзя)
    static int counter = 0;
    double revenue = 8 + (counter++ % 5); // Выручка 8-12
    updateBudget(revenue - productionCost);
}

std::string Company::getType() const {
    return "Company";
}

double Company::getProductionCost() const {
    return productionCost;
}

// Government implementation
Government::Government(double initialBudget, double tax, double subsidy, const std::string& name) 
    : EconomicAgent(initialBudget, name), taxRate(tax), subsidyRate(subsidy) {}

void Government::makeDecision() {
    // Решения принимаются через applyTaxesAndSubsidies
}

void Government::applyTaxesAndSubsidies(EconomicAgent** agents, int count) {
    for (int i = 0; i < count; ++i) {
        EconomicAgent* agent = agents[i];
        if (agent == this) continue;
        
        if (agent->getBudget() > 0) {
            double tax = agent->getBudget() * taxRate;
            agent->updateBudget(-tax);
            this->updateBudget(tax);
        } else {
            double subsidy = -agent->getBudget() * subsidyRate;
            this->updateBudget(-subsidy);
            agent->updateBudget(subsidy);
        }
    }
}

std::string Government::getType() const {
    return "Government";
}

// Market implementation
Market::Market(int maxCapacity) : capacity(maxCapacity), agentCount(0) {
    agents = new EconomicAgent*[capacity];
}

Market::~Market() {
    for (int i = 0; i < agentCount; ++i) {
        delete agents[i];
    }
    delete[] agents;
}

void Market::addAgent(EconomicAgent* agent) {
    if (agentCount < capacity) {
        agents[agentCount++] = agent;
    }
}

void Market::sortAgentsByBudget() {
    // Пузырьковая сортировка
    for (int i = 0; i < agentCount-1; ++i) {
        for (int j = 0; j < agentCount-i-1; ++j) {
            if (agents[j]->getBudget() < agents[j+1]->getBudget()) {
                EconomicAgent* temp = agents[j];
                agents[j] = agents[j+1];
                agents[j+1] = temp;
            }
        }
    }
}

void Market::simulateInteractions(int interactions) {
    for (int i = 0; i < interactions; ++i) {
        // Простейшая реализация без случайных чисел
        int idx1 = i % agentCount;
        int idx2 = (i + 1) % agentCount;
        
        agents[idx1]->makeDecision();
        agents[idx2]->makeDecision();
        
        if (i % 10 == 0) {
            for (int j = 0; j < agentCount; ++j) {
                if (dynamic_cast<Government*>(agents[j])) {
                    ((Government*)agents[j])->applyTaxesAndSubsidies(agents, agentCount);
                }
            }
        }
    }
}

void Market::printTopWealth(int topN) {
    sortAgentsByBudget();
    int n = topN < agentCount ? topN : agentCount;
    
    std::cout << "Top " << n << " wealthiest agents:\n";
    for (int i = 0; i < n; ++i) {
        std::cout << agents[i]->getType() << " " << agents[i]->getName() 
                  << ": " << agents[i]->getBudget() << "\n";
    }
}
